# Using Pyprefab

## pyprefab CLI

By design, pyprefab requires only a few pieces of information to create the
boilerplate for a Python package.

```bash
➜ pyprefab --help

  Usage: pyprefab [OPTIONS] NAME

 🐍 Create Python package boilerplate 🐍

╭─ Arguments ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *    name      TEXT  Name of the project                                                                                      │
│                      [required]                                                                                               │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Options ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *  --author             TEXT  Project author                                                                                  │
│                               [required]                                                                                      │
│ *  --description        TEXT  Project description                                                                             │
│                               [required]                                                                                      │
│ *  --dir                PATH  Directory that will contain the project                                                         │
│                               [required]                                                                                      │
│    --help                     Show this message and exit.                                                                     │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

For example:

```sh
pyprefab project_test --author lassie --description "this is a pet project for lassie" --dir ~/code/lassie
```

If you don't explicitly pass the `--author`, `--description`, and `--dir` options,
pyprefab will prompt you for them:

```sh
➜ pyprefab project_test
Project author: lassie
Project description: this is a pet project for lassie
Project directory: /Users/dogs/code/lassie
```

## Creating a dev environment for the new package

Follow the steps below to create a development environment for Python packages
generated by pyprefab.

These directions use `uv`, but you can use your preferred tooling.

1. `cd` to the directory of the new Python package

2. Create a virtual environment and install the project dependencies:

    ```sh
    uv sync
    ```

3. Test the project setupt:

    ```sh
    uv run <your_package_name>
    ```

    You should see a log output stating that the project has been set up correctly.

    For example:
    `2025-01-13 02:29:08 [info     ] project_test successfully created.`

    You can also run the tests:

    ```sh
    uv run pytest
    ```

**Optional:**

- Add the new project to a git repository:

    ```sh
    git init
    git add .
    git commit -am "Initial commit"
    ```

- If you use [pre-commit](https://pre-commit.com/), pyprefab's boilerplate
includes a baseline `pre-commit-config.yaml` configuration. To use it, make
sure the project has been added to git (see above) and run the following
command to install the pre-commit git hook scripts:

    ```sh
    pre-commit install
    ```
